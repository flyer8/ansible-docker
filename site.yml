---
- hosts: localhost
  become: yes
  tasks:

  - name: Create a network with options
    docker_network:
      name: LoyaltyNet
      driver_options:
        com.docker.network.bridge.name: LoyaltyNet
      ipam_options:
        subnet: '172.20.0.0/16'
        gateway: 172.20.0.1

  - name: Build DB image loyalty/pg-master
    docker_image:
      path: .
      dockerfile: Dockerfile.pgmaster
      name: loyalty/pg-master

  - name: Run Master DB container
    docker_container:
      name: pg-master
      image: loyalty/pg-master
      networks:
        - name: LoyaltyNet
          ipv4_address: "172.20.0.2"
      state: started
      restart_policy: always
      env:
        POSTGRES_USER: 'postgres'
        POSTGRES_PASSWORD: 'postgres'
        PGDATA: '/var/lib/postgresql'
      volumes:
      - '/var/lib/postgresql'
#      ports:
#      - "5432:5432"

  - name: Build Web App image loyalty/django_app
    docker_image:
      path: .
      dockerfile: Dockerfile.django
      name: loyalty/django_app

  - name: Run Web App 1 container
    docker_container:
      name: web1
      image: loyalty/django_app
      networks:
        - name: LoyaltyNet
          ipv4_address: "172.20.0.4"
      state: started
      restart_policy: always
      command: bash -c "python manage.py inspectdb > loyalty_app/models.py && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
      links:
      - pg-master
      volumes:
      - ./code:/code
#      ports:
#      - "8000"
#    with_sequence: start=1 end=2

  - name: Build Slave DB image
    docker_image:
      path: .
      dockerfile: Dockerfile.pgslave
      name: loyalty/pg-slave

  - name: Run Slave DB container
    docker_container:
      name: pg-slave
      image: loyalty/pg-slave
      networks:
        - name: LoyaltyNet
          ipv4_address: "172.20.0.3"
      state: started
      restart_policy: always
      env:
        POSTGRES_USER: 'postgres'
        POSTGRES_PASSWORD: 'postgres'
        PGDATA: '/var/lib/postgresql'
        REPLICATE_FROM: 'pg-master'
      links:
      - pg-master
#      volumes:
#      - '/var/lib/postgresql'

  - name: Run Web App 2 container
    docker_container:
      name: web2
      image: loyalty/django_app
      networks:
        - name: LoyaltyNet
          ipv4_address: "172.20.0.5"
      state: started
      restart_policy: always
      command: bash -c "python manage.py inspectdb > loyalty_app/models.py && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
      links:
      - pg-master
      volumes:
      - ./code:/code
#      ports:
#      - "8000"
#    with_sequence: start=1 end=2

# Please change "0.0.0.0:1936:1936" to your IP
  - name: Run load balancer
    docker_container:
      name: lb
      image: dockercloud/haproxy
      networks:
        - name: LoyaltyNet
          ipv4_address: "172.20.0.6"
      ports:
        - "80:80"
        - "0.0.0.0:1936:1936"
      state: started
      restart_policy: always
      links:
      - web1
      - web2
      volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'

# Please change value of <source> to your IP or Subnet
#  - iptables: chain=INPUT policy=DROP
#  - iptables: chain=FORWARD policy=DROP
#  - iptables: action=append chain=INPUT protocol=tcp source=0.0.0.0/0 destination_port=22 jump=ACCEPT
#  - iptables: action=insert chain=FORWARD protocol=tcp source=0.0.0.0/0 jump=ACCEPT
#    become: yes
#  - name: Insert rule connection limit 5 for HTTP
#    command: /sbin/iptables -I DOCKER -p tcp -m connlimit --connlimit-above 5 --dport 80 -d 172.20.0.6 -j DROP
